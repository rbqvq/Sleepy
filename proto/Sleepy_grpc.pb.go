// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: Sleepy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sleepy_RegisterDevice_FullMethodName    = "/proto.Sleepy/RegisterDevice"
	Sleepy_Unregister_FullMethodName        = "/proto.Sleepy/Unregister"
	Sleepy_ReportDeviceState_FullMethodName = "/proto.Sleepy/ReportDeviceState"
)

// SleepyClient is the client API for Sleepy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SleepyClient interface {
	RegisterDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*RegisterResponse, error)
	Unregister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ReportDeviceState(ctx context.Context, in *State, opts ...grpc.CallOption) (*Empty, error)
}

type sleepyClient struct {
	cc grpc.ClientConnInterface
}

func NewSleepyClient(cc grpc.ClientConnInterface) SleepyClient {
	return &sleepyClient{cc}
}

func (c *sleepyClient) RegisterDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Sleepy_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sleepyClient) Unregister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Sleepy_Unregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sleepyClient) ReportDeviceState(ctx context.Context, in *State, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Sleepy_ReportDeviceState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SleepyServer is the server API for Sleepy service.
// All implementations must embed UnimplementedSleepyServer
// for forward compatibility
type SleepyServer interface {
	RegisterDevice(context.Context, *Device) (*RegisterResponse, error)
	Unregister(context.Context, *Empty) (*Empty, error)
	ReportDeviceState(context.Context, *State) (*Empty, error)
	mustEmbedUnimplementedSleepyServer()
}

// UnimplementedSleepyServer must be embedded to have forward compatible implementations.
type UnimplementedSleepyServer struct {
}

func (UnimplementedSleepyServer) RegisterDevice(context.Context, *Device) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedSleepyServer) Unregister(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedSleepyServer) ReportDeviceState(context.Context, *State) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDeviceState not implemented")
}
func (UnimplementedSleepyServer) mustEmbedUnimplementedSleepyServer() {}

// UnsafeSleepyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SleepyServer will
// result in compilation errors.
type UnsafeSleepyServer interface {
	mustEmbedUnimplementedSleepyServer()
}

func RegisterSleepyServer(s grpc.ServiceRegistrar, srv SleepyServer) {
	s.RegisterService(&Sleepy_ServiceDesc, srv)
}

func _Sleepy_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SleepyServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sleepy_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SleepyServer).RegisterDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sleepy_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SleepyServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sleepy_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SleepyServer).Unregister(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sleepy_ReportDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SleepyServer).ReportDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sleepy_ReportDeviceState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SleepyServer).ReportDeviceState(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

// Sleepy_ServiceDesc is the grpc.ServiceDesc for Sleepy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sleepy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Sleepy",
	HandlerType: (*SleepyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Sleepy_RegisterDevice_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Sleepy_Unregister_Handler,
		},
		{
			MethodName: "ReportDeviceState",
			Handler:    _Sleepy_ReportDeviceState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Sleepy.proto",
}
